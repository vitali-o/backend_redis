name: Backend Redis CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: vitaliio/backend_redis

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.7.1

    - name: Log in to Docker Hub
      uses: docker/login-action@v3.3.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version from Git tag
      id: vars
      run: |
        TAG_VERSION=$(git describe --tags --abbrev=0 || echo "latest")
        VERSION="${TAG_VERSION}-${GITHUB_RUN_NUMBER}"
        echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and tag Docker image
      run: |
        docker build -t $IMAGE_NAME:${{ env.VERSION }} .

    - name: Push Docker image to Docker Hub
      run: |
        docker push $IMAGE_NAME:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2 using SSM
      run: |
        DOCKER_IMAGE="${{ env.IMAGE_NAME }}:${{ needs.build.outputs.VERSION }}"
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceids,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --parameters 'commands=[
            "echo ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.VERSION }}",
            "docker pull ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.VERSION }}",
            "docker stop backend_rds || true",
            "docker rm backend_rds || true",
            "docker run -d --name backend_rds \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }} \
              -p 0.0.0.0:8100:8100 \
              ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.VERSION }}"
          ]'

